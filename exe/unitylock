#!/usr/bin/env ruby
require 'unitylock/client'
require 'optparse'

PROJECT_CONFIG_FILE = '.unitylock'

params         = ARGV.getopts('', 'user:', 'force')
command        = ARGV.shift
project_config = File.exists?(PROJECT_CONFIG_FILE) ? JSON.parse(File.read(PROJECT_CONFIG_FILE), {symbolize_names: true}) : {}
url            = project_config[:url] || 'http://localhost:3000'
client         = Unitylock::Client::Main.new(url)

case command
when "search" then
  puts client.search.body
when "touches" then
  puts client.touches(ARGV).body
when "deletes" then
  puts client.deletes(ARGV).body
when "delete_all" then
  puts client.delete_all.body
when "lock" then
  user = params['user']
  raise "requires parameter 'file'" unless ARGV.size > 0
  raise "requires parameter 'user'" unless user != nil
  puts client.locks(user: user, files: ARGV)
when "unlock" then
  user = params['user']
  raise "requires parameter 'file'" unless ARGV.size > 0
  raise "requires parameter 'user'" unless user != nil
  puts client.unlocks(user: user, files: ARGV)
when 'init' then
  print 'url (http://localhost:3000): '
  url = gets.chomp.sub(/^$/, 'http://localhost:3000')
  File.write(PROJECT_CONFIG_FILE, JSON.pretty_generate({url: url}))
  puts 'Created .unitylock'
when 'sync' then
  force = params['force'] || false
  client.sync(dir: '.', force: force)
else
  puts "undefined command"
  exit 1
end

